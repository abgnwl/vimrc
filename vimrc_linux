call plug#begin('~/.vim/plugged')
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'preservim/nerdtree'
call plug#end()


autocmd FileType json syntax match Comment +\/\/.\+$+
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
nmap <silent>fm <Plug>(coc-format) 
augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json,cc,c++ setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
augroup filetype
    autocmd! BufRead,BufNewFile BUILD set filetype=blade
augroup end


" set the select color of vim 
hi IncSearch term=standout ctermfg=0 ctermbg=3
hi CursorColumn term=standout ctermfg=0 ctermbg=3
hi StatusLine term=standout ctermfg=0 ctermbg=3
set number
set nocompatible
set backspace=indent,eol,start
set hidden
set cmdheight=2
set updatetime=300
set laststatus=2
" set statusline=[%t]\ %m%r%h%w\ [TYPE=%Y]\ [%{&fileencoding?&fileencoding:&encoding}]\ \ \ [POS=%l/%L,%v]\ [%p%%]\ \ \ [%{strftime(\"%m-%d\ %H:%M\")}]\ \ \[%F]
" set statusline=[%t]\ %m%r%h%w\ [TYPE=%Y]\ [%{&fileencoding?&fileencoding:&encoding}]\ \ \ [POS=%l/%L,%v]\ [%p%%]\ \ [%F]
set statusline=[%t]\ %m%r%h%w\ [TYPE=%Y]\ [%{&fileencoding?&fileencoding:&encoding}]\ \ \ [POS=%l/%L,%v]\ [%p%%]

" my settings
set scrolloff=3
set hlsearch
set autoindent
set cindent
set smartindent
set showmatch
set ignorecase
inoremap jk <esc>
inoremap jj <esc>
nnoremap ; :
set encoding=utf-8
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set colorcolumn=121
highlight ColorColumn ctermbg=0*
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" NERDTree
" map <F3> :NERDTreeToggle<CR>
" map <F4> :NERDTreeFind<CR>
map <C-e> :NERDTreeToggle<CR>
map <C-f> :NERDTreeFind<CR>
map <C-n> :tabnew<CR>
map <C-j> gT
map <C-k> gt
let NERDTreeShowHidden=1
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1
let NERDTreeIgnore = ['\.swp']
let NERDTreeQuitOnOpen=1
let g:NERDTreeWinSize=50
map <F3> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
map <F4> :sp %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l
nmap ,, <C-w>w 
